{
	"info": {
		"_postman_id": "a49128ce-90da-4905-ae42-1ffa91c01d40",
		"name": "REST API PROJECT",
		"description": "This collection consists of RESTful APIs that uses GET, POST, PUT, PATCH & DELETE http methods to get JSON response from the server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522"
	},
	"item": [
		{
			"name": "POSITIVE TEST CASES",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=3, first_name=Emma, last_name=Wong in 2nd index\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data[2].id).to.eql(3);\r",
									"        pm.expect(jsonData.data[2].first_name).to.eql(\"Emma\");\r",
									"        pm.expect(jsonData.data[2].last_name).to.eql(\"Wong\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "LIST USERS-PAGE#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=2, first_name=Janet, last_name=Weaver\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data.id).to.eql(2);\r",
									"        pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
									"        pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Not Found is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return user data (if exists) in the server"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Lead\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER-PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				},
				{
					"name": "SIGN UP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "This is a RESTful API that uses POST http method to sign up as a new user in the server"
					},
					"response": []
				},
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "This is a RESTful API that uses POST http method to login to the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "DDT-CSV",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page={{pageNumber}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNumber}}"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=2, first_name=Janet, last_name=Weaver\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data.id).to.eql(2);\r",
									"        pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
									"        pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{validEmpID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{validEmpID}}"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Not Found is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{invalidEmpID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{invalidEmpID}}"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return user data (if exists) in the server"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"job\": \"{{currentJob}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr.{{name}}\",\r\n    \"job\": \"{{updatedJob}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/{{validEmpID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{validEmpID}}"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{validEmpID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{validEmpID}}"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "FUZZ DDT",
			"item": [
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"job\": \"{{$randomJobTitle}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}. {{$randomFirstName}}\",\r\n    \"job\": \"{{$randomJobType}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{$randomInt}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{$randomInt}}"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				},
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code is {400, 401, 403}\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401, 403]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "This is a RESTful API that uses POST http method to login to the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "API CHAINING",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=3, first_name=Emma, last_name=Wong in 2nd index\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data[2].id).to.eql(3);\r",
									"        pm.expect(jsonData.data[2].first_name).to.eql(\"Emma\");\r",
									"        pm.expect(jsonData.data[2].last_name).to.eql(\"Wong\");\r",
									"});\r",
									"\r",
									"var extractedBody = JSON.parse(responseBody);\r",
									"var extractedName = extractedBody.data[4].first_name;\r",
									"var extractedID = extractedBody.data[4].id;\r",
									"\r",
									"// console.log(\"The extracted name is    \"+extractedName);\r",
									"\r",
									"pm.globals.set(\"gExtractedName\", extractedName);\r",
									"pm.globals.set(\"globalExtractedID\", extractedID);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=2, first_name=Janet, last_name=Weaver\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data.id).to.eql(2);\r",
									"        pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
									"        pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{globalExtractedID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{globalExtractedID}}"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"var extractedBody = JSON.parse(responseBody);\r",
									"var extractedID = extractedBody.id;\r",
									"\r",
									"// console.log(\"The extractedID is   \"+extractedID);\r",
									"\r",
									"pm.globals.set(\"gExtractedID\", extractedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{gExtractedName}}\",\r\n    \"job\": \"API Test Lead\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. {{gExtractedName}}\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/{{gExtractedID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{gExtractedID}}"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/{{gExtractedID}}",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"{{gExtractedID}}"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "WORKFLOWS TEST EXECUTION",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=3, first_name=Emma, last_name=Wong in 2nd index\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data[2].id).to.eql(3);\r",
									"        pm.expect(jsonData.data[2].first_name).to.eql(\"Emma\");\r",
									"        pm.expect(jsonData.data[2].last_name).to.eql(\"Wong\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"CREATE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "LIST USERS-PAGE#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"SIGN UP\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=2, first_name=Janet, last_name=Weaver\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data.id).to.eql(2);\r",
									"        pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
									"        pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UPDATE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Not Found is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"LIST USERS-PAGE#2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return user data (if exists) in the server"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"SINGLE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Lead\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DELETE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER-PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"SINGLE USER NOT FOUND\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				},
				{
					"name": "SIGN UP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"LOGIN\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "This is a RESTful API that uses POST http method to sign up as a new user in the server"
					},
					"response": []
				},
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "This is a RESTful API that uses POST http method to login to the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "CONDITIONAL WORKFLOWS",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=3, first_name=Emma, last_name=Wong in 2nd index\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data[2].id).to.eql(3);\r",
									"        pm.expect(jsonData.data[2].first_name).to.eql(\"Emma\");\r",
									"        pm.expect(jsonData.data[2].last_name).to.eql(\"Wong\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"CREATE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "LIST USERS-PAGE#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"SIGN UP\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if id=2, first_name=Janet, last_name=Weaver\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.data.id).to.eql(2);\r",
									"        pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
									"        pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
									"});\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"UPDATE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return JSON response from the server"
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Not Found is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"if (pm.response.code==404) {\r",
									"        postman.setNextRequest(\"LIST USERS-PAGE#2\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						},
						"description": "This is a RESTful API that uses GET http method to return user data (if exists) in the server"
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Created is the response description\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"        postman.setNextRequest(\"SINGLE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Lead\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a RESTful API that uses POST http method to create a new user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"DELETE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr. JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "UPDATE USER-PATCH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"job\");\r",
									"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JaiShankar\",\r\n    \"job\": \"API Test Manager\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses PUT http method to update an existing user in the server"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if No Content is the response description\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"        postman.setNextRequest(\"SINGLE USER NOT FOUND\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/367",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"367"
							]
						},
						"description": "This is a RESTful API that uses DELETE http method to delete an existing user in the server"
					},
					"response": []
				},
				{
					"name": "SIGN UP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"LOGIN\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "This is a RESTful API that uses POST http method to sign up as a new user in the server"
					},
					"response": []
				},
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if OK is the response description\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is JSON\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Connection=keep-alive\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if X-Powered-By is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"X-Powered-By\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Server is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 1 second (1000 milli-seconds)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"LOGIN\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "This is a RESTful API that uses POST http method to login to the server"
					},
					"response": []
				}
			],
			"description": "This folder consists of Positive/Smoke test cases"
		},
		{
			"name": "NEGATIVE TEST CASES",
			"item": [
				{
					"name": "HTTP METHOD TAMPERING",
					"item": [
						{
							"name": "LIST USERs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE-USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran\",\r\n    \"job\": \"Trainer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE-USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kiran\",\r\n    \"job\": \"Trainer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE-USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400, 404, 405\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 405]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users/2",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAYLOAD TAMPERING",
					"item": [
						{
							"name": "CREAT-USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"leader\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE-USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Shankar\",\r\n    \"job\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATEUSER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATEUSER-job missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Shankar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATEUSER-name missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"job\":\"Manager\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATEUSER-new field added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"shankar\",\r\n    \"job\":\"Manager\",\r\n    \"salary\":\"10000 USD$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATEUSER-new field added & mandatory field removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"shankar\",\r\n    \"salary\":\"10000 USD$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QUERY PARAM TAMPERING",
					"item": [
						{
							"name": "LIST USERS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side clientError\", function () {\r",
											"        pm.response.to.be.clientError();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=0",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USERs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side clientError\", function () {\r",
											"        pm.response.to.be.clientError();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=-1",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USER-data type check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side clientError\", function () {\r",
											"        pm.response.to.be.clientError();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=shankar",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "shankar"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST USER-exra query param added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side clientError\", function () {\r",
											"        pm.response.to.be.clientError();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=2&name=Kiran",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "name",
											"value": "Kiran"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "END POINT TAMPERING",
					"item": [
						{
							"name": "SINGLE USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/ten",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"ten"
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE USER-negative emp id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/-3",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"-3"
									]
								}
							},
							"response": []
						},
						{
							"name": "SINGLE USER-spaces in the place of emp id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users/   ",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users",
										"   "
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CONTENT-TYPE TAMPERING",
					"item": [
						{
							"name": "CREATE USER-xml content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-html content type is sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/html",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
									"options": {
										"raw": {
											"language": "html"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE USER-text content type is sent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4XX-Client side error\", function () {\r",
											"        pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "https://reqres.in/api/users",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "This folder consists of negative test cases."
		}
	]
}